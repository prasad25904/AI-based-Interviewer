// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  password      String?
  image         String?
  role          UserRole  @default(CANDIDATE)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  interviews    Interview[]
  resumes       Resume[]
  profile       Profile?
  activities    UserActivity[] // ADD THIS LINE - Missing relation

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Resume {
  id        String   @id @default(cuid())
  userId    String
  filename  String
  content   String
  fileUrl   String?
  fileSize  Int
  createdAt DateTime @default(now())
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("resumes")
}

model Interview {
  id           String          @id @default(cuid())
  userId       String
  title        String
  domain       String
  level        InterviewLevel
  status       InterviewStatus @default(ACTIVE)
  feedback     String?
  score        Int?
  duration     Int?            // in minutes
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  
  user      User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages  InterviewMessage[]
  
  @@map("interviews")
}

model InterviewMessage {
  id          String      @id @default(cuid())
  interviewId String
  content     String
  role        MessageRole
  timestamp   DateTime    @default(now())
  
  interview Interview @relation(fields: [interviewId], references: [id], onDelete: Cascade)
  
  @@map("interview_messages")
}

model Profile {
  id            String   @id @default(cuid())
  userId        String   @unique
  firstName     String?
  lastName      String?
  phone         String?
  location      String?
  jobTitle      String?
  company       String?
  bio           String?
  website       String?
  github        String?
  linkedin      String?
  dateOfBirth   DateTime?
  avatar        String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("profiles")
}

model UserActivity {
  id          String   @id @default(cuid())
  userId      String
  activityType ActivityType
  description String
  metadata    Json?
  createdAt   DateTime @default(now())
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("user_activities")
}

model AdminSetting {
  id                 String   @id @default(cuid())
  siteName           String   @default("InterviewMaster")
  siteUrl            String   @default("https://interviewmaster.com")
  description        String?  @default("AI-powered interview preparation platform")
  timezone           String   @default("utc")
  language           String   @default("en")

  smtpHost           String?  @default("smtp.gmail.com")
  smtpPort           Int?     @default(587)
  smtpUser           String?  @default("noreply@interviewmaster.com")
  smtpPass           String?

  welcomeEmails      Boolean  @default(true)
  notificationEmails Boolean  @default(true)
  twoFactor          Boolean  @default(false)
  passwordPolicy     Boolean  @default(true)
  sessionTimeout     Boolean  @default(true)
  emailNotifications Boolean  @default(true)
  userSignups        Boolean  @default(true)
  systemAlerts       Boolean  @default(true)
  autoBackup         Boolean  @default(true)
  backupFrequency    String   @default("daily")

  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  @@map("admin_settings")
}



enum ActivityType {
  LOGIN
  LOGOUT
  INTERVIEW_STARTED
  INTERVIEW_COMPLETED
  RESUME_UPLOADED
  PROFILE_UPDATED
  ACCOUNT_CREATED
}

enum UserRole {
  CANDIDATE
  ADMIN
}

enum InterviewLevel {
  BASIC
  INTERMEDIATE
  ADVANCED
}

enum InterviewStatus {
  ACTIVE
  COMPLETED
  CANCELLED
}

enum MessageRole {
  USER
  ASSISTANT
}